[metadata]
name = laue_dials
description = A package for analyzing Laue x-ray crystallography data using the DIALS framework.
author = Rick A. Hewitt
author_email = rahewitt@g.harvard.edu
license = MIT
license_files = LICENSE.txt
long_description = file: README.rst
long_description_content_type = text/x-rst; charset=UTF-8
url = https://github.com/rs-station/laue_dials

# Change if running only on Windows, Mac or Linux (comma-separated)
platforms = Mac,Linux

# Add here all kinds of additional classifiers as defined under
# https://pypi.org/classifiers/
classifiers =
    Development Status :: 4 - Beta
    Programming Language :: Python

[options]
zip_safe = False
packages = find_namespace:
include_package_data = True
package_dir =
    =src

# Require a min/specific Python version (comma-separated conditions)
python_requires = >=3.8

# Add here dependencies of your project (line-separated), e.g. requests>=2.2,<3.0.
# Version specifiers like >=2.2,<3.0 avoid problems due to API changes in
# new major versions. This works if the required packages follow Semantic Versioning.
# For more information, check out https://semver.org/.
install_requires =
    importlib-metadata
    reciprocalspaceship
    tqdm
    numpy
    pandas
    argparse
    gemmi
    matplotlib
    scipy
    jupyter

[options.packages.find]
where = src
exclude =
    tests

[options.extras_require]
# Add here additional requirements for extra features, to install with:
# `pip install laue-dials[docs]`
docs =
    sphinx
    myst_parser
    sphinxcontrib_autoprogram
    sphinx_rtd_theme
    nbsphinx
    sphinx-design
    autodocsumm
    pandoc

# Add here test requirements (semicolon/line-separated)
testing =
    setuptools>=61
    pytest
    pytest-cov

[options.entry_points]
# console_scripts =
#     script_name = laue_dials.module:function
console_scripts =
    laue.version = laue_dials.command_line.version:run
    laue.find_spots = laue_dials.command_line.find_spots:run
    laue.index = laue_dials.command_line.index:run
    laue.sequence_to_stills = laue_dials.command_line.sequence_to_stills:run
    laue.assign = laue_dials.command_line.optimize_indexing:run
    laue.optimize_indexing = laue_dials.command_line.optimize_indexing:run
    laue.refine = laue_dials.command_line.refine:run
    laue.predict = laue_dials.command_line.predict:run
    laue.integrate = laue_dials.command_line.integrate:run
    laue.plot_wavelengths = laue_dials.command_line.plot_wavelengths:run
    laue.compute_rmsds = laue_dials.command_line.compute_rmsds:run

[tool:pytest]
# Specify command line options as you would do when invoking pytest directly.
# e.g. --cov-report html (or xml) for html/xml output or --junitxml junit.xml
# in order to write a coverage file that can be read by Jenkins.
# CAUTION: --cov flags may prohibit setting breakpoints while debugging.
#          Comment those flags to avoid this pytest issue.
addopts =
    --cov laue_dials --cov-report xml
    --verbose
norecursedirs =
    dist
    build
    .tox
testpaths = tests
# Use pytest markers to select/deselect specific tests
# markers =
#     slow: mark tests as slow (deselect with '-m "not slow"')
#     system: mark end-to-end system tests

[devpi:upload]
# Options for the devpi: PyPI server and packaging tool
# VCS export must be deactivated since we are using setuptools-scm
no_vcs = 1
formats = bdist_wheel

[flake8]
# Some sane defaults for the code style checker flake8
max_line_length = 88
extend_ignore = E203, W503
# ^  Black-compatible
#    E203 and W503 have edge cases handled by black
exclude =
    .tox
    build
    dist
    .eggs
    docs/conf.py

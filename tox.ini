# Tox configuration file
# Read more under https://tox.wiki/

[tox]
requires = tox-conda
minversion = 3.24
envlist = default
isolated_build = True


[testenv]
description = Invoke pytest to run automated tests
deps =
    pytest
    coverage
    pytest-cov
conda_channels =
    conda-forge
conda_deps =
    dials
setenv =
    TOXINIDIR = {toxinidir}
passenv =
    HOME
    SETUPTOOLS_*
extras =
    testing
commands =
    pip install --upgrade pip
    pip install -e . -r ./docs/requirements.txt
    pytest {posargs:tests}


# To run `tox -e lint` you need to make sure you have a
# `.pre-commit-config.yaml` file. See https://pre-commit.com
[testenv:lint]
description = Perform static analysis and style checks
skip_install = True
deps = pre-commit
passenv =
    HOMEPATH
    PROGRAMDATA
    SETUPTOOLS_*
commands =
    pre-commit run --all-files {posargs:--show-diff-on-failure}


[testenv:{build,clean}]
description =
    build: Build the package in isolation according to PEP517, see https://github.com/pypa/build
    clean: Remove old distribution files and temporary build artifacts (./build and ./dist)
# https://setuptools.pypa.io/en/stable/build_meta.html#how-to-use-it
skip_install = True
changedir = {toxinidir}
deps =
    build: build
conda_channels =
    conda-forge
conda_deps =
    dials
passenv =
    SETUPTOOLS_*
commands =
    clean: python -c 'import shutil; [shutil.rmtree(p, True) for p in ("build", "dist", "docs/_build")]'
    clean: python -c 'import pathlib, shutil; [shutil.rmtree(p, True) for p in pathlib.Path("src").glob("*.egg-info")]'
    build: python -m build {posargs}
# By default, both `sdist` and `wheel` are built. If your sdist is too big or you don't want
# to make it available, consider running: `tox -e build -- --wheel`


[testenv:dev_build]
description =
    build: Build the package in isolation according to PEP517, see https://github.com/pypa/build using latest DIALS dev version
skip_install = True
changedir = {toxinidir}
deps =
    dev_build: build
passenv =
    SETUPTOOLS_*
commands =
    pip install --upgrade pip
    wget https://raw.githubusercontent.com/dials/dials/main/installer/bootstrap.py
    python bootstrap.py
    build: python -m build {posargs}


# By default, both `sdist` and `wheel` are built. If your sdist is too big or you don't want
# to make it available, consider running: `tox -e build -- --wheel`
[testenv:{docs,doctests,linkcheck}]
description =
    docs: Invoke sphinx-build to build the docs
    doctests: Invoke sphinx-build to run doctests
    linkcheck: Check for broken links in the documentation
passenv =
    SETUPTOOLS_*
setenv =
    DOCSDIR = {toxinidir}/docs
    BUILDDIR = {toxinidir}/docs/_build
    docs: BUILD = html
    doctests: BUILD = doctest
    linkcheck: BUILD = linkcheck
deps =
    -r {toxinidir}/docs/requirements.txt
conda_channels =
    conda-forge
conda_deps =
    dials
    pandoc
commands =
    python -m pip install --upgrade pip
    pip install -e .[docs]
    make clean
    make html
#    sphinx-build --color -b {env:BUILD} -d "{env:BUILDDIR}/doctrees" "{env:DOCSDIR}" "{env:BUILDDIR}/{env:BUILD}" {posargs}
allowlist_externals =
    make


[testenv:publish_test]
description =
    Publish the package you have been developing to TestPyPI.
skip_install = True
changedir = {toxinidir}
passenv =
    # See: https://twine.readthedocs.io/en/latest/
    TWINE_USERNAME
    TWINE_PASSWORD
    TWINE_REPOSITORY
    TWINE_REPOSITORY_URL
deps = twine
commands =
    python -m twine check dist/*
    python -m twine upload --repository testpypi dist/*

[testenv:publish]
description =
    Publish the package you have been developing to PyPI.
skip_install = True
changedir = {toxinidir}
passenv =
    # See: https://twine.readthedocs.io/en/latest/
    TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
    TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
deps = twine
commands =
    python -m twine check dist/*
    python -m twine upload --repository pypi dist/*
